{"ast":null,"code":"import { useState } from 'react';\nconst area = 48;\nexport const Burger = ({\n  color = 'currentColor',\n  direction = 'left',\n  distance = 'md',\n  duration = 0.4,\n  easing = 'cubic-bezier(0, 0, 0, 1)',\n  hideOutline = true,\n  label,\n  onToggle,\n  render,\n  rounded = false,\n  size = 32,\n  toggle,\n  toggled,\n  _lines = 3\n}) => {\n  const [toggledInternal, toggleInternal] = useState(false);\n  const width = Math.max(12, Math.min(area, size));\n  const room = Math.round((area - width) / 2);\n  const barHeightRaw = width / 12;\n  const barHeight = Math.round(barHeightRaw);\n  const space = distance === 'lg' ? 0.25 : distance === 'sm' ? 0.75 : 0.5;\n  const marginRaw = width / (_lines * (space + (_lines === 3 ? 1 : 1.25)));\n  const margin = Math.round(marginRaw);\n  const height = barHeight * _lines + margin * (_lines - 1);\n  const topOffset = Math.round((area - height) / 2);\n  const translate = _lines === 3 ? distance === 'lg' ? 4.0425 : distance === 'sm' ? 5.1625 : 4.6325 : distance === 'lg' ? 6.7875 : distance === 'sm' ? 8.4875 : 7.6675;\n  const deviation = (barHeightRaw - barHeight + (marginRaw - margin)) / (_lines === 3 ? 1 : 2);\n  const move = parseFloat((width / translate - deviation / (4 / 3)).toFixed(2));\n  const time = Math.max(0, duration);\n  const burgerStyles = {\n    cursor: 'pointer',\n    height: `${area}px`,\n    position: 'relative',\n    transition: `${time}s ${easing}`,\n    userSelect: 'none',\n    width: `${area}px`\n  };\n  const barStyles = {\n    background: color,\n    height: `${barHeight}px`,\n    left: `${room}px`,\n    position: 'absolute',\n    width: `${width}px`\n  };\n\n  if (hideOutline) {\n    burgerStyles['outline'] = 'none';\n  }\n\n  if (rounded) {\n    barStyles['borderRadius'] = '9em';\n  }\n\n  const isExternal = typeof toggle === 'function' && typeof toggled === 'boolean';\n  const isInternal = typeof toggle !== 'function' && typeof toggled !== 'boolean';\n  const toggleFunction = isExternal ? toggle : isInternal ? toggleInternal : undefined;\n  const toggleCallback = typeof onToggle === 'function' && (isExternal || isInternal) ? onToggle : undefined;\n  const isToggled = typeof toggled === 'boolean' ? toggled : toggledInternal;\n\n  const handler = () => {\n    if (toggleCallback) {\n      toggleCallback(!isToggled);\n    }\n\n    if (toggleFunction) {\n      toggleFunction(!isToggled);\n    }\n  };\n\n  return render({\n    barHeight,\n    barStyles,\n    burgerStyles,\n    easing,\n    handler,\n    isLeft: direction === 'left',\n    isToggled,\n    label,\n    margin,\n    move,\n    time,\n    topOffset\n  });\n};","map":{"version":3,"sources":["C:/wamp64/www/swap_front/node_modules/hamburger-react/dist-esm/Burger.js"],"names":["useState","area","Burger","color","direction","distance","duration","easing","hideOutline","label","onToggle","render","rounded","size","toggle","toggled","_lines","toggledInternal","toggleInternal","width","Math","max","min","room","round","barHeightRaw","barHeight","space","marginRaw","margin","height","topOffset","translate","deviation","move","parseFloat","toFixed","time","burgerStyles","cursor","position","transition","userSelect","barStyles","background","left","isExternal","isInternal","toggleFunction","undefined","toggleCallback","isToggled","handler","isLeft"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nconst area = 48;\nexport const Burger = ({\n  color = 'currentColor',\n  direction = 'left',\n  distance = 'md',\n  duration = 0.4,\n  easing = 'cubic-bezier(0, 0, 0, 1)',\n  hideOutline = true,\n  label,\n  onToggle,\n  render,\n  rounded = false,\n  size = 32,\n  toggle,\n  toggled,\n  _lines = 3\n}) => {\n  const [toggledInternal, toggleInternal] = useState(false);\n  const width = Math.max(12, Math.min(area, size));\n  const room = Math.round((area - width) / 2);\n  const barHeightRaw = width / 12;\n  const barHeight = Math.round(barHeightRaw);\n  const space = distance === 'lg' ? 0.25 : distance === 'sm' ? 0.75 : 0.5;\n  const marginRaw = width / (_lines * (space + (_lines === 3 ? 1 : 1.25)));\n  const margin = Math.round(marginRaw);\n  const height = barHeight * _lines + margin * (_lines - 1);\n  const topOffset = Math.round((area - height) / 2);\n  const translate = _lines === 3 ? distance === 'lg' ? 4.0425 : distance === 'sm' ? 5.1625 : 4.6325 : distance === 'lg' ? 6.7875 : distance === 'sm' ? 8.4875 : 7.6675;\n  const deviation = (barHeightRaw - barHeight + (marginRaw - margin)) / (_lines === 3 ? 1 : 2);\n  const move = parseFloat((width / translate - deviation / (4 / 3)).toFixed(2));\n  const time = Math.max(0, duration);\n  const burgerStyles = {\n    cursor: 'pointer',\n    height: `${area}px`,\n    position: 'relative',\n    transition: `${time}s ${easing}`,\n    userSelect: 'none',\n    width: `${area}px`\n  };\n  const barStyles = {\n    background: color,\n    height: `${barHeight}px`,\n    left: `${room}px`,\n    position: 'absolute',\n    width: `${width}px`\n  };\n\n  if (hideOutline) {\n    burgerStyles['outline'] = 'none';\n  }\n\n  if (rounded) {\n    barStyles['borderRadius'] = '9em';\n  }\n\n  const isExternal = typeof toggle === 'function' && typeof toggled === 'boolean';\n  const isInternal = typeof toggle !== 'function' && typeof toggled !== 'boolean';\n  const toggleFunction = isExternal ? toggle : isInternal ? toggleInternal : undefined;\n  const toggleCallback = typeof onToggle === 'function' && (isExternal || isInternal) ? onToggle : undefined;\n  const isToggled = typeof toggled === 'boolean' ? toggled : toggledInternal;\n\n  const handler = () => {\n    if (toggleCallback) {\n      toggleCallback(!isToggled);\n    }\n\n    if (toggleFunction) {\n      toggleFunction(!isToggled);\n    }\n  };\n\n  return render({\n    barHeight,\n    barStyles,\n    burgerStyles,\n    easing,\n    handler,\n    isLeft: direction === 'left',\n    isToggled,\n    label,\n    margin,\n    move,\n    time,\n    topOffset\n  });\n};"]},"metadata":{},"sourceType":"module"}